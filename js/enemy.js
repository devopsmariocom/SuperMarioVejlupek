class Enemy{constructor(t,i,h=30,s=30,e=2){this.x=t,this.y=i,this.width=h,this.height=s,this.speed=e,this.direction=1,this.color="#00FF00",this.speed<1&&(this.speed=1)}update(t){let i=!1,h=0,s=0;for(let e of t)if(this.x+this.width>e.x&&this.x<e.x+e.width&&this.y+this.height>=e.y&&this.y+this.height<=e.y+10){i=!0,h=e.x,s=e.x+e.width;break}if(i)this.x+=this.speed*this.direction,(this.x<=h||this.x+this.width>=s)&&(this.direction*=-1,this.x=Math.max(h,Math.min(s-this.width,this.x)));else{this.y+=5;for(let e of t)if(this.x+this.width>e.x&&this.x<e.x+e.width&&this.y+this.height>=e.y&&this.y+this.height<=e.y+15){this.y=e.y-this.height,i=!0,h=e.x,s=e.x+e.width;break}if(this.y>1e3)for(let i of t)if(i.width>=100){this.x=i.x+i.width/2-this.width/2,this.y=i.y-this.height;break}}this.x<0&&(this.direction=1,this.x=0)}draw(t,i=0){t.fillStyle=this.color,t.fillRect(this.x-i,this.y,this.width,this.height),t.fillStyle="#000000",1===this.direction?t.fillRect(this.x-i+20,this.y+8,5,5):t.fillRect(this.x-i+5,this.y+8,5,5)}checkCollision(t){return Utils.checkCollision(this,t)}}const EnemyGenerator={generateEnemies:function(t,i=3){const h=[],s=t.filter((t=>t.width>=150&&t.x>300&&t.y<550));s.sort(((t,i)=>i.width-t.width));for(let t=0;t<Math.min(i,s.length);t++){const i=s[t],e=i.x+i.width/2-15,l=i.y-30,n=new Enemy(e,l,30,30,2);h.push(n)}if(h.length<i){const s=t.filter((t=>t.y>=550&&t.width>=200&&t.x>300));for(let t=0;t<Math.min(i-h.length,s.length);t++){const i=s[t],e=i.x+i.width/2-15,l=i.y-30,n=new Enemy(e,l,30,30,2);h.push(n)}}return h}};